{"./":{"url":"./","title":"内容简介","keywords":"","body":"内容简介 俗话说“好记性不如烂笔头”，这里主要是记录华为认证考试学习过程中掌握的核心知识点和领悟。 目前，我对网络有一些基本的认识，熟悉Linux系统中各种网络的配置，也熟悉OpenStack虚拟网络的实现。 但是在网络设备、广域网及安全设备等方面缺乏经验，所以就想借着考证倒逼下自己，一方面可以更系统的 学习网络及安全方面的知识，弥补自己在这方面的短板，另一方面，通过考试作为自己对这些新知识掌握 情况的一个考核。 powered by Gitbooktime： 2019-02-22 23:24:40 "},"HCIA-RS/1-enterprise-network-arch.html":{"url":"HCIA-RS/1-enterprise-network-arch.html","title":"1.1 企业网络架构","keywords":"","body":"企业网络架构介绍 企业组网的基本需求 与企业的业务及规模密切相关 - 大型企业通常跨越多个物理位置，需要使用远程互联技术来 连接总部与分支机构 连接企业与合作伙伴或客户 为出差人员提供移动办公 需要考虑数据的私密性和安全性 企业网络的基本架构 小型企业网络： 采用扁平的网络架构 缺乏冗余，可靠性不高 大型企业网络： 对业务的连续性要求很高 通过网络设备冗余来保证网络的可用性和稳定性 采用分层的网络架构 需要对资源进行访问控制 需要对流量进行细粒度的控制 采用模块化设计，实现网络隔离并简化网络维护 powered by Gitbooktime： 2019-02-22 22:52:00 "},"HCIA-RS/2-media.html":{"url":"HCIA-RS/2-media.html","title":"1.2 传输介质","keywords":"","body":"传输介质 传输介质对网络通信的影响主要有： 线路编码方式 传输速度 传输距离 传输介质有多种形式： 物理线缆 无线电波 同轴电缆 早起的以太网采用同轴电缆传输数据，同轴电缆有两种标准： 10BASE2（细缆）：5mm，最长传输距离185米 10BASE5（粗缆）：9.5mm，最长传输距离500米 两个标准的传输速率都是10Mbps，这个速率很难满足企业网络的需求，现在很少采用了。 双绞线 双绞线就是最常见的网线，应用非常普遍，百兆千兆的双绞线随处可见。双绞线主要有如下的类型： 3类双绞线：速率10Mbps 5类双绞线：速率100Mbps 超5类双绞线：速率100/1000Mbps 双绞线使用RJ-45接头连接网络设备，RJ-45接头中的针脚必须按照一定的线序排列。 光纤 同轴电缆和双绞线都使用电信号传输数据。光纤使用光信号传输数据，能够实现更长距离、更高带宽的数据传输。 根据光纤传输光信号模式的不同，光纤可以分为： 单模光纤：只传输一种模式的光 不存在色散，传输距离长， 多模光纤：允许不同模式的光同时传输 存在色散，只适合短距离传输 串口电缆 常见串口标准： RS-232：传输速率有限，传输距离仅6米 RS-422：传输距离1200米 RS-485：传输距离1200米 冲突域 共享式网络中存在信号冲突的问题，常见的解决方法是载波侦听多路访问/冲突检测技术（CSMA/CD：Carrier Sense Multiple Access/Collision Detection）。 CSMA/CD工作过程如下： 终端设备不停地检测共享线路的状态。如果线路空闲，则可以发送数据；如果线路不空闲，则等待一段时间后继续检测（延时时间由退避算法决定）。 如果有另外一个设备同时发送数据，两个设备发送的数据会产生冲突。 终端设备检测到冲突之后，会马上停止发送自己的数据，并发送特殊阻塞信息，以强化冲突信号，使线路上其他站点能够尽早检测到冲突。 终端设备检测到冲突后，等待一段时间之后再进行数据发送（延时时间由退避算法决定）。 CSMA/CD的工作原理可简单总结为：先听后发，边发边听，冲突停发，随机延迟后重发。 powered by Gitbooktime： 2019-02-22 22:52:00 "},"HCIA-RS/3-ethernet.html":{"url":"HCIA-RS/3-ethernet.html","title":"1.3 以太网帧结构","keywords":"","body":"以太网帧结构 OSI分层模型 OSI参考模型各个层次分层如下： 物理层：在设备之间传输比特流，规定了电平、速度、电缆针脚 数据链路层：将比特组合成字节，再将字节组合成帧，使用链路层地址来访问介质，并进行差错检测； 网络层：提供逻辑地址，供路由器确定路径； 传输层：提供面向连接或非面向连接的数据传递以及数据重传前的差错检测； 会话层：负责建立、管理、终止表示层实体之间的通信会话，该层的通信由不同设备中的应用程序之间的请求和响应组成； 表示层：提供各种用于应用层数据的编码和转换功能，确保一个系统的应用层发送的数据能被另一个系统的应用层识别； 应用层：为应用程序提供网络服务。 TCP/IP分层模型 TCP/IP模型将网络分为四层，TCP/IP模型不关注底层物理介质，主要关注终端之间的逻辑数据流转发。 TCP/IP模型的核心是网络层和传输层，网络层解决网络之间的逻辑转发问题，传输层保证源端到目的端之间的可靠传输。 TCP/IP每层都使用该层的协议数据单元PDU（protocol data unit）彼此交换信息，不同层的PDU有不同的名称： 传输层：segment（数据段） 网络层：packet（数据包） 数据链路层：frame (帧) 帧格式 以太网帧有两种格式，如下图所示： 以太网中绝大多数帧都是Ethernet II格式。 Ethernet II格式 各个字段的含义如下： DMAC： 目的MAC地址，标识帧的接收者； SMAC：源MAC地址，标识帧的发送者； Type：长度是2字节，标识高层协议；取值为0x0800代表IP协议帧，取值为0x0806代表ARP协议帧 Data：数据字段是网络层数据，最小长度46字节，最大长度1500字节； FCS（循环冗余校验字段）：是一种错误检测机制，该字段4字节。 IEEE 802.3 格式 与Ehternet II格式类似，不过原来的Type字段别Length取代（数字小于等于1500），并占用了Data字段8个字节用作LLC和SNAP。具体如下： Length：定义Data字段包含的字节数（必须小于等于1500） LLC（Logical Link Control）：逻辑链路控制，由DSAP（Destination Service Access Point）、SSAP（Source Service Access Point）及Control字段组成； SNAP（Sub-network Access Protocol）：有机构代码和类型字段组成。Type字段与Ethernet II帧的Type字段相同。 MAC地址 MAC地址是全球唯一的，长度是48 bit，分层两部分： OUI（Organization Unique Identifier）：IEEE统一分配给设备制造商的代号； 后面24 bit由制造商自行分配； 帧的传输 局域网上的帧可以通过三种方式发送 单播 MAC地址的OUI中，第一个字节第8比特为0，表示这是一个单播地址 帧从单一源发送给单一的目的端 同一冲突域中，所有主机都能收到源主机发送的单播帧，但是发现其目的地址不是本地的MAC地址后，会丢弃收到的帧，只有真正的目的主机才会接收并处理收到的帧 广播 帧从单一源发送给共享以太网上所有的主机 广播的目的MAC地址为：FF:FF:FF:FF:FF:FF 所有收到该广播帧的主机都要接收并处理帧 大量的广播会导致带宽利用率降低，进而影响整个网络的性能 组播 组播可以理解为选择性的广播，主机侦听特定组播地址，接收并处理目的MAC地址为该组播MAC地址的帧 组播目的MAC地址的第一个字节的第8比特为1 帧的接收流程 if frame.dmac != local mac or frame.dmac != boradcast mac or frame.dmac != multicast mac; then drop frame endif calculate fcs; if frame.fcs is wrong; then drop frame endif strip frame header and tail; dispatch frame accounding to type filed; powered by Gitbooktime： 2019-02-22 22:52:00 "},"HCIA-RS/4-IP.html":{"url":"HCIA-RS/4-IP.html","title":"1.4 IP编址","keywords":"","body":"IP编址 IP数据帧格式 IP报文结构 IP报文结构如下图所示： IP报文头部长度为20~60字节，各个字段的含义如下： version：长度4比特；标识目前所使用的IP协议的版本号。一般值为0100（IPv4）和0110（IPv6） header length：长度4比特，描述IP头部的长度；注意单位是4字节，如果值为1111，那么IP头部长度为15*4=60字节； DS Field：早起用来表示业务类型，现在用于支持qos中的差分服务模型，实现网络流量优化； total length：长度16比特，以字节为单位计算IP包的长度； identification：长度16比特，需要与flags & fragment offset联合使用，实现数据包的分片； flags：长度3比特； bit 0：预留，必须为0； bit 1（DF）：表明路由器是否可以对数据包进行分片；为0表示可以，为1表示不能分片；如果不允许分片，且超过了目的链路的MTU，则路由器会丢弃该报文，并返回一个错误信息； bit 2（MF）：为0表示Last fragment，为1表示More fragment； fragment offset：数据包分片后，本数据包在原报文的位置； time to live：数据包没经过一个路由器，该字段值减少1，如果减为0，则路由器会丢弃改数据包； Protocol：标识上层所使用的协议，以便把数据包传递给上层协议处理； header checksum：IP头部校验和； source IP address：源IP地址； Destination IP address：目的IP地址； IP编址 IP地址用来标识网络中的设备，IP地址的结构如下： IPv4的地址为32比特，分成两部分： 网络号：表示IP地址所属的网段； 主机号：用来唯一标识本网段上的某台网络设备； 特殊的IP地址： 网络地址：IP地址的主机位全为0，表示一个网段； 广播地址：IP地址的主机位全为1 IP地址分类 IP地址分成A、B、C、D、E五类。 D类地址为组播地址，主机收到D类地址为目的地址的报文后，且该主机是该组播组成员，就会接收并处理报文。 私网地址 为了减少公网地址的消耗，在A、B、C类地址中各预留了一些地址段作为私网地址，这类地址的数据包不能在公网上传输。私网地址默认不能和公网地址进行通信，需要转换为公网地址才能和公网地址通信。私网地址范围如下： 10.0.0.0/8 172.16.0.0/12 ~ 172.31.0.0/12 192.168.0.0/16 特殊地址 127.0.0.0/8：环回地址，不出网络设备，主要用来诊断网络是否正常； 0.0.0.0：标识任何网络，在路由协议中会用到； 255.255.255.255：广播地址； 将IP地址划分成5类，带来的一个问题是IP地址使用率低。解决方法是采用VLSM（变长子网掩码）。 无类域间路由 无类域间路由（CIDR：Classless Inter Domain Routing）将路由表中的若干条路由汇聚成一条路由，减少了路由表的规模，提高了路由器的可扩展性。 网关 如果目的主机和源主机不在同一个网段，报文需要先转发到网关，然后通过网关将报文转发到目的网段。 网关是指接收并处理本地网段主机发送的报文并转发到目的网段的设备。 网关连接本地网段的接口地址就是该网段的网关地址。 IP包分片 网络中转发的IP报文长度可以不同，如果报文长度超过了数据链路所支持的最大报文长度，则报文就需要分割成若干个较小的片段才能够在链路上传输。将报文分割成多个片段的过程叫做分片。 分片发生在发送到链路层之前，如果链路的MTU不同，就需要执行分片。 分片到达目的IP才会重组。报文在网络传输过程中，可能经过多次分片，因此没有必要在中间设备上进行重组。 因为传输过程中可能发生多次分片，因此，Fragment Offset必须是分片在整个IP报文的偏移量，才能在目的端进行重组。 powered by Gitbooktime： 2019-02-22 22:52:00 "},"HCIA-RS/5-icmp.html":{"url":"HCIA-RS/5-icmp.html","title":"1.5 ICMP协议","keywords":"","body":"ICMP协议 powered by Gitbooktime： 2019-02-22 23:22:58 "},"HCIA-RS/6-arp.html":{"url":"HCIA-RS/6-arp.html","title":"1.6 ARP协议","keywords":"","body":"ARP协议 ARP（Address Resolution Protocol） 网络设备在发送数据给另一个网络设备之前，需要获取下一跳的MAC地址。MAC地址的获取就是通过ARP协议来实现。 ARP数据包格式 ARP数据包格式如下： ARP报文不能穿越路由器，也不能被转发到其他广播域 各个字段具体含义如下： hardware type：硬件地址类型，一般为以太网； Protocol type：三层协议地址类型，一般为IP； hardware length：MAC地址长度（单位是字节） protocol length：IP地址长度（单位是字节） operation code：ARP报文的类型 ARP Request：ARP请求报文 ARP Reply：ARP回应报文 Source Hardware Address：发送者的MAC地址 Source Protocol Address：发送者的IP地址 Destination Hardware Address：接收者的MAC地址 Destination Protocol Address：接收者的IP地址 看个实际的ARP报文，下面是一个实际的ARP Reply报文。 ARP缓存 为了提高IP地址到MAC地址的转换速度，网络设备一般都有ARP缓存，数据发送前，先查找ARP缓存表，缓存表中找不到对方的MAC地址时，才会通过ARP协议获对应IP地址的MAC地址。 如果目的IP地址不在同一个网络，发送者会在ARP缓存中查找网关的MAC地址。 ARP缓存有有效期，过期了就会被自动删除掉。 在linux系统上，可以通过arp命令来查看ARP环境。如下： # arp -n Address HWtype HWaddress Flags Mask Iface 192.168.121.77 ether 52:54:00:f7:56:7d C virbr0 192.168.56.177 ether 52:54:00:0b:2a:81 C virbr1 192.168.1.2 ether 00:0e:c6:d2:bf:c8 C enp0s31f6 192.168.1.1 ether 00:0e:c6:b0:dc:42 C enp0s31f6 ARP请求 在ARP缓存表中找不到IP地址对应的MAC地址时，主机会通过广播的方式发送ARP Request报文。报文的内容包括： 源IP地址 源MAC地址 目的IP地址 目的MAC地址：00：00:00:00:00:00 一个实际的ARP广播报文如下图所示： 上图是192.168.1.3这个主机缺少192.168.1.2的MAC地址时，发出的ARP广播报文。 ARP响应 主机收到ARP Request报文后，处理流程如下： if frame.arp.ip == self.ip then cache frame.arp.sip & frame.arp.smac send arp reply frame endif 一个实际的ARP响应报文如下图所示： ARP响应报文是单薄报文，报文中源MAC地址是自己的MAC地址，目的MAC地址是原先发生ARP Request的主机的MAC地址。 ARP代理 如果两台主机位于不同的网络，而且没有配置网关的情况下，通过广播是无法获取对方的MAC地址，这时候如果路由器开启ARP代理功能，双方不配置网关也能实现相互通信。如下图： 开启ARP代理后，路由器收到ARP广播包后，通过查找路由表，发现存在主机B的路由，就会通过G0/0/0的MAC地址来响应ARP广播报文。主机A收到ARP Reply之后，就会把数据包发给路由器，通过路由器在转发给主机B。 免费ARP 当主机分配了IP地址或IP地址发生了变更，主机必须立即检测其IP地址在网络是是否唯一，以避免地址冲突。检测方法是发送免费的ARP报文，包的特点： 帧头部的目的地址是广播地址 ARP Request报文中源和目的IP地址相同 powered by Gitbooktime： 2019-02-22 23:20:10 "},"HCIA-RS/8-ip-forward.html":{"url":"HCIA-RS/8-ip-forward.html","title":"1.8 数据转发过程","keywords":"","body":"数据转发过程 思考：网络层数据包是如何在相同或不同网段之间转发的? powered by Gitbooktime： 2019-02-24 23:06:56 "},"HCIA-RS/7-tcp-udp.html":{"url":"HCIA-RS/7-tcp-udp.html","title":"1.7 传输层协议","keywords":"","body":"传输层协议 传输层最常见的协议就是TCP（Transmission Control Protocol）和UDP（User Datagram Protocol）。 TCP简介 TCP位于TCP/IP协议的传输层，是一种面向连接的、可靠的、端到端的数据传输协议。 为了区分同一个主机上的不同进程，需要通过端口号来标识不同的服务。 TCP头部 TCP头部结构如下： TCP头部正常情况下是20个自己，有Option的情况下，最多60个自己。头部各个字段的含义如下： Source Port：源主机上应用程序使用的端口号； Destination Port：目的主机上接收程序使用的端口号； Sequence Number：用来标识发送端发出的数据段的序号；由于数据包可能不是按顺序到达的，接收方可以通过序列号正确的重组数据段； Acknowledge Number：用来表示接收方确认收到的数据段的序列号；确认序列号为发送序列号加1； Header Length：TCP头部的长度，单位是32bit（4字节）；因为Header Length是4 bit，所以头部正常为15*4=60字节； Window：通常用来表示发送方和接收方可以的缓存大小，用来实现流量控制的； Checksum：整个TCP报文（包括TCP头部和数据）的校验和； TCP三次握手 TCP建立连接的过程被称为三次握手，三次握手具体的过程如下： 如上图所示： 第一次握手：主机A给服务器A发送带有SYN标记的报文，并附带上主机A上的序列号a（语义：我想和你建立连接） 第二次握手：服务器A收到主机A发送过来的报文后，回复一个SYN+ACK标记的报文，ACK的序号为a+1，并附带上服务器A上的序列号b（语义：我接受你的请求，我准备好了） 第三次握手：主机A收到服务器A的SYN+ACK报文后，会给服务器A发送一个ACK报文，ACK的序号为b+1（语义：我知道你准备好了；） 思考：为什么三次握手就够了，如果三次握手中的一个或多个包丢失了如何处理？ 经过三次握手之后，主机和服务器都知道对方已经准备好了，可以开始传输数据了；因此从语义上来说是够了。 如果第一次握手的数据丢了，主机和服务器无法建立连接；主机侧重试建立连接即可。 如果第二次握手的数据丢了，服务器会重发SYN+ACK包；服务器上的连接状态会一直停在SYN_RECV状态，直到收到ACK包或超时，超时的话，服务器端会发送RST包，TCP连接状态变为CLOSED状态。 如果第三次握手的数据丢了，主机可能会认为连接已经建立；但是服务器上连接状态会一直停在SYN_RECV状态，直到收到ACK包或超时。 思考：如果恶意程序只发送其中的一个或两个包怎么处理？ 由于服务器端收到SYN包之后，就会开始分配资源（如：数据包缓存），如果短时间内收到大量的SYN包，服务器就会分配大量的资源，甚至出现资源耗尽的现象。一旦资源耗尽，就不能再提供服务了。这种类型的恶意攻击就是SYN Flood攻击，利用的就是TCP协议的特点展开攻击。 TCP关闭连接 由于TCP支持全双工模式传输数据，TCP在关闭连接时需要四次挥手，确保两个方向都没有数据要传输了再关闭。 四次挥手的具体过程如下： 第一次挥手：客户端数据全部发送完毕，发送一个FIN包，希望和服务器断开连接； 第二次挥手：服务器都收到FIN包之后，所有的数据都收到了，则恢复一个ACK包，ACK序列号为客户端的序列号加1； 第三次挥手：服务器端所有的数据发送完毕，也会给客户端发送一个FIN包，表示服务器端也没有数据要发送了； 第四次挥手：客户端收到服务器端的FIN包之后，也会给服务器端发送一个ACK包，ACK序列号为服务器端的序列号加1； 整个过程及TCP连接的状态转换如下图所示： 上图显示的是一方主动关闭连接时的状态转换图。在一些情况下，通信的双方可能同时发起关闭连接的操作。同时关闭时，状态转换如下图所示： UDP协议 UDP（User Datagram Protocol）是一种无连接的传输层协议，不保证网络通信的可靠性。 UDP头部 UDP头部如下图所示： 各个字段的含义如下： Source Port：表示源主机应用程序使用的端口 Destination Port：表示目的主机应用程序使用的端口 Length：头部和数据的总长度（以字节为单位） Checksum：头部和数据的校验和（可选） UDP传输过程 使用UDP传输数据时，需要应用程序自己解决报文排序、流量控制等功能。 优势： 不提供重传机制，占用资源少，处理效率高，时延低 一些对时延敏感的流量，如语音、视频等，通常采用UDP作为传输协议 powered by Gitbooktime： 2019-02-24 23:04:46 "}}